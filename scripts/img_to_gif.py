# Disclaimer: This script was generated by an LLM

# Takes a folder, sorts the images by name, and creates a gif from them.
import os
from PIL import Image
def create_gif_from_images(image_folder, output_gif, duration):
    # Get a list of image files in the folder
    images = [img for img in os.listdir(image_folder) if img.endswith(('.bmp', '.jpg', '.jpeg'))]
    
    # Sort the images by the numerical part of the filename
    images.sort(key=lambda x: int(''.join(filter(str.isdigit, x))) if any(char.isdigit() for char in x) else 0)

    # Create a list to hold the image objects
    frames = []

    for image in images:
        try:
            # Open the image file
            img_path = os.path.join(image_folder, image)
            frame = Image.open(img_path)
            frames.append(frame)

        except Exception as e:
            print(f"Error opening image {image}: {e}")
            continue

    # Final frame sometimes corrupted, remove it
    frames = frames[:-1]
    
    # Save the frames as a GIF
    if frames:
        frames[0].save(output_gif, format='GIF', append_images=frames[1:], save_all=True, duration=duration, loop=0)
        print(f"GIF saved as {output_gif}")
    else:
        print("No images found to create GIF.")
        
if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Create a GIF from images in a folder.")
    parser.add_argument("image_folder", type=str, help="Path to the folder containing images.")
    parser.add_argument("--output_gif", type=str, default="output.gif", help="Path to save the output GIF.")
    parser.add_argument("--duration", type=int, default=100, help="Duration of each frame in milliseconds.")

    args = parser.parse_args()
    
    print(f"Creating GIF: {args.output_gif} from images in {args.image_folder} with duration {args.duration}ms per frame.")

    create_gif_from_images(args.image_folder, args.output_gif, args.duration)
